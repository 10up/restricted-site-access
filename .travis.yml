language: php

sudo: false

php:
  - 7.2

matrix:
  fast_finish: true

cache:
  apt: true
  directories:
    - vendor

install:
  - composer install --no-interaction

# Declare which versions of WordPress to test against.
env:
    - WP_VERSION=master

services:
    - mysql

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  - pwd
  # Set up WordPress installation.
  - export WP_DEVELOP_DIR=/tmp/wordpress/
  - mkdir -p $WP_DEVELOP_DIR
  # Use the Git mirror of WordPress.
  - git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
  # Set up WordPress configuration.
  - cd $WP_DEVELOP_DIR
  - echo $WP_DEVELOP_DIR
  - cp wp-tests-config-sample.php wp-tests-config.php
  - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
  - sed -i "s/yourusernamehere/root/" wp-tests-config.php
  - sed -i "s/yourpasswordhere//" wp-tests-config.php
  # Create WordPress database.
  - mysql -e 'CREATE DATABASE wordpress_test;' -uroot
  # Switch back to the plugin dir
  - cd $TRAVIS_BUILD_DIR

script:
  - if [ -n "$AWS_ACCESS_KEY" ]; then ./vendor/bin/wpsnapshots configure 10up --aws_key=$AWS_ACCESS_KEY --aws_secret=$SECRET_ACCESS_KEY --user_name=Travis --user_email=travis@10up.com; fi
  - if [ -n "$AWS_ACCESS_KEY" ]; then bash run-wpacceptance.sh; fi
  - mkdir test-coverage
  - ./vendor/bin/phpunit --verbose
  - ./vendor/bin/phpunit --verbose -c tests/php/multisite/multisite.xml
  # Run phpcs
  - ./vendor/bin/phpcs *.php --standard=WordPress
